#pragma once
#include "VisionPipeline.h"

#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/contrib/contrib.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/features2d.hpp>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <map>
#include <vector>
#include <string>
#include <math.h>

namespace grip {

/**
* A representation of the different types of blurs that can be used.
*
*/
enum BlurType {
	BOX, GAUSSIAN, MEDIAN, BILATERAL
};
/**
* GRIPVision class.
* 
* An OpenCV pipeline generated by GRIP.
*/
class GRIPVision : public VisionPipeline {
	private:
		cv::Mat resizeImageOutput;
		cv::Mat hsvThresholdOutput;
		cv::Mat cvErodeOutput;
		cv::Mat blurOutput;
		std::vector<cv::KeyPoint> findBlobsOutput;
		std::vector<std::vector<cv::Point> > findContoursOutput;
		void resizeImage(cv::Mat &, double , double , int , cv::Mat &);
		void hsvThreshold(cv::Mat &, double [], double [], double [], cv::Mat &);
		void cvErode(cv::Mat &, cv::Mat &, cv::Point &, double , int , cv::Scalar &, cv::Mat &);
		void blur(cv::Mat &, BlurType &, double , cv::Mat &);
		void findBlobs(cv::Mat &, double , double [], bool , std::vector<cv::KeyPoint> &);
		void findContours(cv::Mat &, bool , std::vector<std::vector<cv::Point> > &);

	public:
		GRIPVision();
		void process(cv::Mat source0);
		cv::Mat* getresizeImageOutput();
		cv::Mat* gethsvThresholdOutput();
		cv::Mat* getcvErodeOutput();
		cv::Mat* getblurOutput();
		std::vector<cv::KeyPoint>* getfindBlobsOutput();
		std::vector<std::vector<cv::Point> >* getfindContoursOutput();
};


} // end namespace grip


