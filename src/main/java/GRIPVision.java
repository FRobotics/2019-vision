// package GRIPVision;

//--------example imports
//unused import java.io.IOException;
//unused import java.nio.file.Files;
//unused import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

//unused import com.google.gson.Gson;
//unused import com.google.gson.GsonBuilder;
//unused import com.google.gson.JsonArray;
//unused import com.google.gson.JsonElement;
//unused import com.google.gson.JsonObject;
//unused import com.google.gson.JsonParser;

//unused import edu.wpi.cscore.MjpegServer;
//unused import edu.wpi.cscore.UsbCamera;
//unused import edu.wpi.cscore.VideoSource;
//unused import edu.wpi.first.cameraserver.CameraServer;
//unused import edu.wpi.first.networktables.EntryListenerFlags;
//unused import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.vision.VisionPipeline;
//unused import edu.wpi.first.vision.VisionThread;

import org.opencv.core.Mat;


//orig imports imports
//unused import java.io.File;
//unused import java.io.FileWriter;
//dup import java.io.IOException;
//dup import java.util.ArrayList;
//dup import java.util.List;
//unused import java.util.Map;
//unused import java.util.stream.Collectors;
//unused import java.util.HashMap;

//old import edu.wpi.first.wpilibj.vision.VisionPipeline;

import org.opencv.core.*;
//unused import org.opencv.core.Core.*;
//unused import org.opencv.features2d.FeatureDetector;
//unused import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.*;
//unused import org.opencv.objdetect.*;




/**
* GRIPVision class.
*
* <p>An OpenCV pipeline generated by GRIP.
*
* @author GRIP
*/
public class GRIPVision implements VisionPipeline {

	public double wDog = 0.0;

	//Outputs
	private Mat resizeImageOutput = new Mat();
	private Mat hsvThresholdOutput = new Mat();
	private Mat cvErodeOutput = new Mat();
	private Mat blurOutput = new Mat();
	private MatOfKeyPoint findBlobsOutput = new MatOfKeyPoint();
	private ArrayList<MatOfPoint> findContoursOutput = new ArrayList<MatOfPoint>();

	//--------values for filter
	private double[] dblGlobalHsvThresholdHue = {70.66187050359712, 128.13651877133107};
	private double[] dblGlobalHsvThresholdSaturation = {21.98741007194246, 109.0};
	private double[] dblGlobalHsvThresholdValue = {206.98741007194246, 255.0};


	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the outputs.
	 */
	@Override	public void process(Mat source0) {

		//debug System.out.println("--------------------process--------------" );


		// Step Resize_Image0:
		//    HOPEFULLY THE IMAGE IS REALLY THIS SIZE ALREADY!
		//
		Mat resizeImageInput = source0;
		double resizeImageWidth = 320.0;
		double resizeImageHeight = 240.0;
		int resizeImageInterpolation = Imgproc.INTER_CUBIC;
		resizeImage(resizeImageInput, resizeImageWidth, resizeImageHeight, resizeImageInterpolation, resizeImageOutput);
		
		//debug System.out.println("--------------------Resize--------------" );
		
		// Step HSV_Threshold0:
		//		DONE - HSV threshold - it would be best if these were variables read from network tables and set by the dashboard.
		//			  the network table variables would have to be done in the MAIN routine and made available as public variables.
		//            Note if this were done, I believe that there is a translation between LV and OpenCV representations
		//			  of these values. 
		//--------MOVE the hsv values to classwide private variables so they can be updated with a method.
		Mat hsvThresholdInput = resizeImageOutput;
		//Original numbers for hsvThreshold
		//double[] hsvThresholdHue = {22.66187050359712, 100.13651877133107};
		//double[] hsvThresholdSaturation = {171.98741007194246, 255.0};
		//double[] hsvThresholdValue = {171.98741007194246, 255.0};
		// ver 2
		//double[] hsvThresholdHue = {70.66187050359712, 128.13651877133107};
		//double[] hsvThresholdSaturation = {21.98741007194246, 109.0};
		//double[] hsvThresholdValue = {206.98741007194246, 255.0};
		// ver 3
		double[] hsvThresholdHue = {dblGlobalHsvThresholdHue[0], dblGlobalHsvThresholdHue[1]};
		double[] hsvThresholdSaturation = {dblGlobalHsvThresholdSaturation[0], dblGlobalHsvThresholdSaturation[1]};
		double[] hsvThresholdValue = {dblGlobalHsvThresholdValue[0], dblGlobalHsvThresholdValue[1]};
		//
		hsvThreshold(hsvThresholdInput, hsvThresholdHue, hsvThresholdSaturation, hsvThresholdValue, hsvThresholdOutput);

		//debug System.out.println("--------------------Threshold--------------" );

		// Step CV_erode0:
		Mat cvErodeSrc = hsvThresholdOutput;
		Mat cvErodeKernel = new Mat();
		Point cvErodeAnchor = new Point(-1, -1);
		double cvErodeIterations = 1.0;
		int cvErodeBordertype = Core.BORDER_CONSTANT;
		Scalar cvErodeBordervalue = new Scalar(-1);
		cvErode(cvErodeSrc, cvErodeKernel, cvErodeAnchor, cvErodeIterations, cvErodeBordertype, cvErodeBordervalue, cvErodeOutput);

		//debug System.out.println("--------------------Erode--------------" );
		
		// Step Blur0:
		Mat blurInput = cvErodeOutput;
		BlurType blurType = BlurType.get("Gaussian Blur");
		double blurRadius = 2.7027027027027026;
		blur(blurInput, blurType, blurRadius, blurOutput);

		//debug System.out.println("--------------------Blur--------------" );
		
		// Step Find_Blobs0:
		//		TEAM4150 - if we end up not using this, comment it out.  This routine appears to take a long time.
		//unused  Mat findBlobsInput = blurOutput;
		//unused  double findBlobsMinArea = 1.0;
		//unused  double[] findBlobsCircularity = {0.0, 1.0};
		//unused  boolean findBlobsDarkBlobs = false;
		//unused  findBlobs(findBlobsInput, findBlobsMinArea, findBlobsCircularity, findBlobsDarkBlobs, findBlobsOutput);

		// Step Find_Contours0:
		Mat findContoursInput = blurOutput;
		boolean findContoursExternalOnly = false;
		findContours(findContoursInput, findContoursExternalOnly, findContoursOutput);

		//debug System.out.println("--------------------Contours--------------" );
		
		//--------increment watch dog
		wDog++;
		if ( wDog > 1023.0) {
			wDog = 0.0;
		}

		// -------- return to user.  The user then has to call the generated getter routines (below) to extract values.
		//debug System.out.println("--------------------endOfProcess--------------" );
	}

	/**
	 * This method is a generated getter for the output of a Resize_Image.
	 * @return Mat output from Resize_Image.
	 */
	public Mat resizeImageOutput() {
		return resizeImageOutput;
	}
	
	/**
	 * This method is a generated getter for the output of a HSV_Threshold.
	 * @return Mat output from HSV_Threshold.
	 */
	public Mat hsvThresholdOutput() {
		return hsvThresholdOutput;
	}

	/**
	 * This method is a generated getter for the output of a CV_erode.
	 * @return Mat output from CV_erode.
	 */
	public Mat cvErodeOutput() {
		return cvErodeOutput;
	}

	/**
	 * This method is a generated getter for the output of a Blur.
	 * @return Mat output from Blur.
	 */
	public Mat blurOutput() {
		return blurOutput;
	}

	/**
	 * This method is a generated getter for the output of a Find_Blobs.
	 * @return MatOfKeyPoint output from Find_Blobs.
	 */
	public MatOfKeyPoint findBlobsOutput() {
		return findBlobsOutput;
	}

	/**
	 * This method is a generated getter for the output of a Find_Contours.
	 * @return ArrayList<MatOfPoint> output from Find_Contours.
	 */
	public ArrayList<MatOfPoint> findContoursOutput() {
		return findContoursOutput;
	}

	/**
	 * Scales and image to an exact size.
	 * @param input The image on which to perform the Resize.
	 * @param width The width of the output in pixels.
	 * @param height The height of the output in pixels.
	 * @param interpolation The type of interpolation.
	 * @param output The image in which to store the output.
	 */
	private void resizeImage(Mat input, double width, double height,
		int interpolation, Mat output) {
		Imgproc.resize(input, output, new Size(width, height), 0.0, 0.0, interpolation);
	}

	/**
	 * Segment an image based on hue, saturation, and value ranges.
	 *
	 * @param input The image on which to perform the HSL threshold.
	 * @param hue The min and max hue
	 * @param sat The min and max saturation
	 * @param val The min and max value
	 * @param output The image in which to store the output.
	 */
	private void hsvThreshold(Mat input, double[] hue, double[] sat, double[] val,
	    Mat out) {
		Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HSV);
		Core.inRange(out, new Scalar(hue[0], sat[0], val[0]),
			new Scalar(hue[1], sat[1], val[1]), out);
	}

	/**
	 * Expands area of lower value in an image.
	 * @param src the Image to erode.
	 * @param kernel the kernel for erosion.
	 * @param anchor the center of the kernel.
	 * @param iterations the number of times to perform the erosion.
	 * @param borderType pixel extrapolation method.
	 * @param borderValue value to be used for a constant border.
	 * @param dst Output Image.
	 */
	private void cvErode(Mat src, Mat kernel, Point anchor, double iterations,
		int borderType, Scalar borderValue, Mat dst) {
		if (kernel == null) {
			kernel = new Mat();
		}
		if (anchor == null) {
			anchor = new Point(-1,-1);
		}
		if (borderValue == null) {
			borderValue = new Scalar(-1);
		}
		Imgproc.erode(src, dst, kernel, anchor, (int)iterations, borderType, borderValue);
	}

	/**
	 * An indication of which type of filter to use for a blur.
	 * Choices are BOX, GAUSSIAN, MEDIAN, and BILATERAL
	 */
	enum BlurType{
		BOX("Box Blur"), GAUSSIAN("Gaussian Blur"), MEDIAN("Median Filter"),
			BILATERAL("Bilateral Filter");

		private final String label;

		BlurType(String label) {
			this.label = label;
		}

		public static BlurType get(String type) {
			if (BILATERAL.label.equals(type)) {
				return BILATERAL;
			}
			else if (GAUSSIAN.label.equals(type)) {
			return GAUSSIAN;
			}
			else if (MEDIAN.label.equals(type)) {
				return MEDIAN;
			}
			else {
				return BOX;
			}
		}

		@Override
		public String toString() {
			return this.label;
		}
	}

	/**
	 * Softens an image using one of several filters.
	 * @param input The image on which to perform the blur.
	 * @param type The blurType to perform.
	 * @param doubleRadius The radius for the blur.
	 * @param output The image in which to store the output.
	 */
	private void blur(Mat input, BlurType type, double doubleRadius,
		Mat output) {
		int radius = (int)(doubleRadius + 0.5);
		int kernelSize;
		switch(type){
			case BOX:
				kernelSize = 2 * radius + 1;
				Imgproc.blur(input, output, new Size(kernelSize, kernelSize));
				break;
			case GAUSSIAN:
				kernelSize = 6 * radius + 1;
				Imgproc.GaussianBlur(input,output, new Size(kernelSize, kernelSize), radius);
				break;
			case MEDIAN:
				kernelSize = 2 * radius + 1;
				Imgproc.medianBlur(input, output, kernelSize);
				break;
			case BILATERAL:
				Imgproc.bilateralFilter(input, output, -1, radius, radius);
				break;
		}
	}

	/**
	 * Detects groups of pixels in an image.
	 * @param input The image on which to perform the find blobs.
	 * @param minArea The minimum size of a blob that will be found
	 * @param circularity The minimum and maximum circularity of blobs that will be found
	 * @param darkBlobs The boolean that determines if light or dark blobs are found.
	 * @param blobList The output where the MatOfKeyPoint is stored.
	 */
	/* unused- private void findBlobs(Mat input, double minArea, double[] circularity,
		Boolean darkBlobs, MatOfKeyPoint blobList) {
		FeatureDetector blobDet = FeatureDetector.create(FeatureDetector.SIMPLEBLOB);
		try {
			File tempFile = File.createTempFile("config", ".xml");

			StringBuilder config = new StringBuilder();

			config.append("<?xml version=\"1.0\"?>\n");
			config.append("<opencv_storage>\n");
			config.append("<thresholdStep>10.</thresholdStep>\n");
			config.append("<minThreshold>50.</minThreshold>\n");
			config.append("<maxThreshold>220.</maxThreshold>\n");
			config.append("<minRepeatability>2</minRepeatability>\n");
			config.append("<minDistBetweenBlobs>10.</minDistBetweenBlobs>\n");
			config.append("<filterByColor>1</filterByColor>\n");
			config.append("<blobColor>");
			config.append((darkBlobs ? 0 : 255));
			config.append("</blobColor>\n");
			config.append("<filterByArea>1</filterByArea>\n");
			config.append("<minArea>");
			config.append(minArea);
			config.append("</minArea>\n");
			config.append("<maxArea>");
			config.append(Integer.MAX_VALUE);
			config.append("</maxArea>\n");
			config.append("<filterByCircularity>1</filterByCircularity>\n");
			config.append("<minCircularity>");
			config.append(circularity[0]);
			config.append("</minCircularity>\n");
			config.append("<maxCircularity>");
			config.append(circularity[1]);
			config.append("</maxCircularity>\n");
			config.append("<filterByInertia>0</filterByInertia>\n");
			config.append("<filterByConvexity>0</filterByConvexity>\n");
			config.append("</opencv_storage>\n");
			FileWriter writer;
			writer = new FileWriter(tempFile, false);
			writer.write(config.toString());
			writer.close();
			blobDet.read(tempFile.getPath());
		} catch (IOException e) {
			e.printStackTrace();
		}

		blobDet.detect(input, blobList);
	}
	unused */

	/**
	 * Sets the values of pixels in a binary image to their distance to the nearest black pixel.
	 * @param input The image on which to perform the Distance Transform.
	 * @param type The Transform.
	 * @param maskSize the size of the mask.
	 * @param output The image in which to store the output.
	 */
	private void findContours(Mat input, boolean externalOnly,
		List<MatOfPoint> contours) {
		Mat hierarchy = new Mat();
		contours.clear();
		int mode;
		if (externalOnly) {
			mode = Imgproc.RETR_EXTERNAL;
		}
		else {
			mode = Imgproc.RETR_LIST;
		}
		int method = Imgproc.CHAIN_APPROX_SIMPLE;
		Imgproc.findContours(input, contours, hierarchy, mode, method);
	}


	//--------set the values for the HSV filter.
	public void setHSVValues( double HueLow, double HueHigh, double SatLow, double SatHigh, double ValueLow, double ValueHigh) {
		dblGlobalHsvThresholdHue[0] = HueLow;
		dblGlobalHsvThresholdHue[1] = HueHigh;

		dblGlobalHsvThresholdSaturation[0] = SatLow;
		dblGlobalHsvThresholdSaturation[1] = SatHigh;

		dblGlobalHsvThresholdValue[0] = ValueLow;
		dblGlobalHsvThresholdValue[1] = ValueHigh;
	}

	//--------return low hue to user
	public double getHueLow() {
		return dblGlobalHsvThresholdHue[0];
	}

	//--------return high hue to user
	public double getHueHigh() {
		return dblGlobalHsvThresholdHue[1];
	}

	//--------return low saturation to user
	public double getSaturationLow() {
		return dblGlobalHsvThresholdSaturation[0];
	}

	//--------return high saturation to user
	public double getSaturationHigh() {
		return dblGlobalHsvThresholdSaturation[1];
	}

	//--------return low value to user
	public double getValueLow() {
		return dblGlobalHsvThresholdValue[0];
	}

	//--------return high value to user
	public double getValueHigh() {
		return dblGlobalHsvThresholdValue[1];
	}

}

